/**
你正在参加一个多角色游戏，每个角色都有两个主要属性：攻击 和 防御 。给你一个二维整数数组 properties ，其中 properties[i] = [attacki, defensei] 表示游戏中第 i 个角色的属性。
如果存在一个其他角色的攻击和防御等级 都严格高于 该角色的攻击和防御等级，则认为该角色为 弱角色 。更正式地，如果认为角色 i 弱于 存在的另一个角色 j ，那么 attackj > attacki 且 defensej > defensei 。
返回 弱角色 的数量。

示例 1：
输入：properties = [[5,5],[6,3],[3,6]]
输出：0
解释：不存在攻击和防御都严格高于其他角色的角色。

示例 2：
输入：properties = [[2,2],[3,3]]
输出：1
解释：第一个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。

示例 3：
输入：properties = [[1,5],[10,4],[4,3]]
输出：1
解释：第三个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。

提示：
2 <= properties.length <= 105
properties[i].length == 2
1 <= attacki, defensei <= 105
 */
/**
 * @param {number[][]} properties
 * @return {number}
    按攻击从大到小、防御从大到小排序后，我们得到一个比较满意的顺序，
    遍历到当前的指针时，之前的怪的攻击力都是大于等于自己的，
    我们只需要知道他们之中大于自己攻击力的最高的防御力，来确认自己是不是弱角色。
    使用双指针，第一个指针维护当前遍历到的攻击力（之前最高的防御力），
    第二个指针遍历与第一个指针攻击力相同的怪的防御力（当前攻击力下的防御力），
    统计弱角色的个数。
 */

const numberOfWeakCharacters = properties => {
    // 攻击从大到小排序；若攻击相同，防御从小到大排序
    properties.sort((a, b) => b[0] - a[0] || a[1] - b[1]);
    let res = 0;
    let max = 0;
    for (const [att, def] of properties) {
        if (max > def) {
            res++;
        } else {
            max = def;
        }
    }
    return res;
};


var properties = [[29, 26], [92, 1], [81, 64], [41, 54], [56, 74], [76, 39], [16, 69], [78, 84], [65, 39], [7, 2], [62, 96], [16, 22], [47, 34], [16, 22], [66, 26], [93, 49], [55, 16], [41, 21], [11, 73], [17, 1], [63, 81], [90, 37], [83, 50], [7, 97], [86, 14], [68, 67], [65, 63], [35, 32], [100, 1], [23, 4], [17, 6], [74, 52], [98, 90], [4, 15], [31, 36], [69, 53], [17, 33], [80, 56], [8, 100], [94, 85], [89, 76], [14, 76], [31, 85], [89, 54], [73, 69], [55, 7], [73, 13], [31, 100], [29, 55], [82, 6], [12, 66], [17, 72], [45, 50], [99, 73], [41, 10], [89, 16], [69, 35], [72, 34], [85, 49], [12, 5], [61, 42], [32, 28], [10, 55], [61, 19], [17, 4], [48, 59], [15, 44], [7, 48], [1, 92], [68, 12], [23, 6], [5, 92], [70, 49], [59, 3], [9, 62], [50, 6], [75, 39], [7, 79], [35, 80], [94, 41], [25, 43], [44, 16], [3, 68], [87, 62], [70, 62], [68, 49], [8, 46], [16, 7], [16, 60], [42, 48]]
let res = numberOfWeakCharacters(properties)
console.log('res :>> ', res);
